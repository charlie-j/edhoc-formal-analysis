
/*
 * Protocol:   LAKE
   https://datatracker.ietf.org/doc/html/draft-ietf-lake-edhoc-12

   A lightweight DH based key exchange.


# Weaker primitive modeling and compromises
`-D=WeakestSignature` enables all weak signature models,  see StrongSignatureExamples/attackfinding.spthy. This actually enables a set of sub-flags, one for each atomic weakness.
`-D=CollapseHash`  consider a collapsing hash function
`-D=LeakShare` allows to leak ephemeral shares
`-D=XorPrecise` emulates a malleable xor.
`-D=WeakAEAD` is a malleable aead

# Stronger Protocol Check
`-D=NeutralCheck` enforces that the protocol agents verifies that the DH share they received is not the identity element such that e^x = e    
`-D=CredCheck` enforces that the agents checks that they do not communicate with themselves.

# Extra security property
`-D=NonRepudiatonSoundness` incudes processes for non repudiation soundness
`-D=NonRepudiationCompleteness` incudes processes for non repudiation completeness  -> implies that shares are leaked, and does not work in proverif

Scenarios to check ideally:
 - `tamarin-prover -D=NonRepudiation -D=WeakestSignature -D=LeakShare`
 - `tamarin-prover -D=WeakestSignature -D=LeakShare`

*/

theory edhoc

begin

builtins: diffie-hellman


functions: method_zero/0, method_one/0, method_two/0, method_three/0, length/0,
		   hash_length/0, edhoc_mac_length/0, key_length/0, iv_length/0, plaintext_length/0,
		   error_code_one/0, error_code_two/0,
		   suitesIConst/0, suitesRConst/0,
		   edhoc_kdf/4,
		   aeadenc/4, aeaddec/3 [destructor],
		   pk/1,  id/2, get_DH_cred/1 [destructor], get_sig_cred/1 [destructor],
		   wrap/1,
		   hash/1,hkdfextract/2, hkdfexpand/2

equations: get_DH_cred(id(x,y))=y,
           get_sig_cred(id(x,y))=x,
           aeaddec(aeadenc(m,r,k,ad),k,ad) = m






























#define SignatureEvent


// Advanced signatures modeling: https://eprint.iacr.org/2019/779.pdf
functions: sign/3,  revealsign/1[destructor], sigtrue/0

functions: mangle/2
equations: mangle(sign(m,r1,sk),r2) = sign(m,r2,sk)
functions: e1/1 [private]
functions: e2/1 [private]
functions: e3/1 [private]
equations: e1(sign(x,y,z)) = x
equations: e2(sign(x,y,z)) = y
equations: e3(sign(x,y,z)) = z
equations: revealsign(sign(m,r, sk)) = m


 // Restrictions 
/*
 restriction correctness:
 "
     All sig tm tpk #i #j. 
     	Honest(tpk)@i & Verified(sig,tm,tpk,tm,tpk,false)@j
     		==> F
 "
We never test against false in the protocol, so we don't need the correctness
*/

export queries:
"
restriction sig:bitstring, sm:bitstring, spk:bitstring, tm:bitstring,
      tpk:bitstring;
 ((event(Honest( tpk ))) &&
  (event(Verified( sig, sm, spk, tm, tpk, sigtrue )))) ==>
  
 ((sm = tm) && (pk(spk) = tpk))
.
(*consistency*)
restriction r1:bitstring, r2:bitstring, sig:bitstring, sm:bitstring,
      spk:bitstring, tm:bitstring, tpk:bitstring;
 ((event(Verified( sig, sm, spk, tm, tpk, r1 ))) &&
  (event(Verified( sig, sm, spk, tm, tpk, r2 )))) ==>
 (r1 = r2).

select x,y,z:bitstring; attacker(sign(x,y,z))/-5000.

"

restriction noForgery: // (euf-cma)
"
	All sig tm tpk sm spk #i #j.
		Honest(tpk)@i & Verified (sig, sm, spk, tm, tpk, sigtrue)@j
		==> sm = tm & pk(spk) = tpk
"

restriction consistency:
"
	 All sig sm spk tm tpk r1 r2 #i #j.
		Verified (sig, sm, spk, tm, tpk, r1)@i &
		Verified (sig, sm, spk, tm, tpk, r2)@j 
			==> r1 = r2
"




#include "Headers.splib"













#ifdef NonRepudiation

/* I sent proof to JudgeR in order to prouve that R participate to the exchange => method_zero and method_two */
let JudgeR =
    new stamp;
    in(<ID_CRED_R,TH_2,pkR,EAD_2,MAC_2,signed>);    
    let proofnrR = <ID_CRED_R,TH_2,pkR,EAD_2,MAC_2,signed> in
    event JudgeReceivedR(stamp,proofnrR);
    

event Verified (signed,e1(signed),e3(signed),<'Signature1',ID_CRED_R,TH_2,pkR,EAD_2,MAC_2>, pkR , sigtrue);


        event WasActiveR(pkR, TH_2, proofnrR);
        event JudgeProcessedR(proofnrR)
    else
        event JudgeProcessedR(proofnrR)

/* R sent proof to JudgeI in order to prouve that I participate to the exchange => warning, just method_zero here */
let JudgeI =
    new stamp;
    in(<ID_CRED_I,TH_3,pkI,EAD_3,MAC_3,signed>);
    let proofnrI = <ID_CRED_I,TH_3,pkI,EAD_3,MAC_3,signed> in
    event JudgeReceivedI(stamp,proofnrI) ;
    

event Verified (signed,e1(signed),e3(signed),<'Signature2',ID_CRED_I,TH_3,pkI,EAD_3,MAC_3>, pkI , sigtrue);


        event WasActiveI(pkI, TH_3, proofnrI);
        event JudgeProcessedI(proofnrI)
    else
        event JudgeProcessedI(proofnrI)

#endif


#ifdef not NonRepudiation

let JudgeR = 0
let JudgeI = 0

#endif



// Initiator with long term authentication key ~skI and long term DH share ~I
// computerId is only used to keep track of the machine on which the key exists
let I(~cid, ~skI, ~I, ID_CRED_R) =
    in(<method,suitesI,C_I,EAD_1>); // we let the attacker fully control the parameters used2 by a session
    event MethodOk(method);
    new ~X; // DH share
    new ~EAD_3; // we model the EAD_3 as a fresh name to test later its secrecy
    event Share(~X);
    (
    CompromiseShare(~X) |    
    let CRED_I = pk(~skI) in
    let ID_CRED_I = id(CRED_I,  'g'^~I ) in        
    
    let G_X =  'g'^~X  in
    let G_I =  'g'^~I  in    
    
    let m1 = <method,suitesI,G_X,C_I,EAD_1> in
    out(m1);
    
    in(m2);
    let < G_Y, CIPHERTEXT_2 > = m2 in
    let TH_1 = hash(wrap(method) || wrap(suitesI) || wrap(G_X) || wrap(C_I) || EAD_1) in
    let TH_2 = hash( wrap(G_Y) || wrap(TH_1)) in
       
    

let G_YX = G_Y^~X in


    
    let PRK_2e = hkdfextract(TH_2, G_YX) in
    let KEYSTREAM_2 = edhoc_kdf(PRK_2e,'tzero',TH_2,plaintext_length) in 
    let plaintext_2 = decxor(CIPHERTEXT_2,KEYSTREAM_2) in
    let < C_R, =ID_CRED_R, SIGNATURE_or_MAC_2, EAD_2> = plaintext_2 in
    if (check_grp(G_Y) = grpid) then // Not in the standard: we test against the value testgrpid, which is either a useless constant or the neutral element of the group.
       0
    else   
    if (ID_CRED_I = check_cred(ID_CRED_R)) then // Not in the standard: we test if we did not receive our own cred
    0
    else
			   

        (
	if (method = method_zero) then
	    (
	    
	    let pkR = get_sig_cred(ID_CRED_R) in 
	    let pkI = get_sig_cred(ID_CRED_I) in 
	    
	    let PRK_3e2m = PRK_2e in
	    
	    event DerivedIShared(pkI, G_YX); 
	    let MAC_2 = edhoc_kdf(PRK_3e2m,'two', <ID_CRED_R, TH_2,  pkR, EAD_2>, hash_length) in 
	    
            

event Verified (SIGNATURE_or_MAC_2,e1(SIGNATURE_or_MAC_2),e3(SIGNATURE_or_MAC_2),<'Signature1',ID_CRED_R,TH_2,pkR,EAD_2,MAC_2>, pkR , sigtrue);


	    	    
		(
		let TH_3 = hash(wrap(TH_2) || plaintext_2 || pkR) in
    	        event THIShared(pkI, TH_3); 		
		
		let PRK_4e3m = PRK_3e2m in 
		
		let MAC_3 = edhoc_kdf(PRK_4e3m, 'six', <ID_CRED_I, TH_3, pkI,~EAD_3>,hash_length) in
		
		
let SIGNATURE_or_MAC_3 = sign(<'Signature2',ID_CRED_I,TH_3,pkI,~EAD_3,MAC_3>, 'rep', ~skI) in

	        	

		let K_3 = edhoc_kdf(PRK_3e2m,'three',TH_3, key_length) in
		let IV_3 = edhoc_kdf(PRK_3e2m,'four',TH_3, iv_length) in
		let plaintext_3 = <ID_CRED_I, SIGNATURE_or_MAC_3,~EAD_3> in
		let m3 = aeadenc(plaintext_3,'rep',K_3,IV_3) in
		let TH_4 = hash(wrap(TH_3) ||  plaintext_3 || pkI) in
		let PRK_out = edhoc_kdf(PRK_4e3m, 'seven', TH_4, hash_length) in
		event AcceptI(~cid,method_zero,pkI,pkR,PRK_3e2m,PRK_4e3m,PRK_out,~X,G_Y);
		event SecretsI(~cid,method_zero,pkI,pkR,PRK_2e,PRK_3e2m,PRK_4e3m,PRK_out,KEYSTREAM_2,K_3,IV_3,~X,G_Y);		
		event AcceptIData(PRK_out,method_zero,pkI,pkR,~X,G_Y,<TH_2,TH_3,TH_4,suitesI, EAD_1, EAD_2, ~EAD_3, m1, plaintext_2, plaintext_3>);
		out(m3);
		  (
                ContactJudgeFromI(ID_CRED_R,TH_2,pkR,EAD_2,MAC_2, SIGNATURE_or_MAC_2)
                 |
		   leakSKey(PRK_out)
		  )
                )		

	    ) 
	     
	else (if (method = method_one) then 
	    (
	    
	    let pkR = get_DH_cred(ID_CRED_R) in 
	    let pkI = get_sig_cred(ID_CRED_I) in 
	    
            

let pkRX = pkR^~X in


	    let SALT_3e2m = edhoc_kdf(PRK_2e, 'tone', TH_2, hash_length) in
	    let PRK_3e2m = hkdfextract(SALT_3e2m, pkRX) in
	    
	    event DerivedIShared(pkI, G_YX); 
	    let MAC_2 = edhoc_kdf(PRK_3e2m,'two', <ID_CRED_R, TH_2,  pkR, EAD_2>, hash_length) in 
	    	    
	    if (SIGNATURE_or_MAC_2 = MAC_2) then 
	    	    
		(
		let TH_3 = hash(wrap(TH_2) || plaintext_2 || pkR) in
    	        event THIShared(pkI, TH_3); 		
		
		let PRK_4e3m = PRK_3e2m in 
		
		let MAC_3 = edhoc_kdf(PRK_4e3m, 'six', <ID_CRED_I, TH_3, pkI,~EAD_3>,hash_length) in
		
		
let SIGNATURE_or_MAC_3 = sign(<'Signature2',ID_CRED_I,TH_3,pkI,~EAD_3,MAC_3>, 'rep', ~skI) in

	        	

		let K_3 = edhoc_kdf(PRK_3e2m,'three',TH_3, key_length) in
		let IV_3 = edhoc_kdf(PRK_3e2m,'four',TH_3, iv_length) in
		let plaintext_3 = <ID_CRED_I, SIGNATURE_or_MAC_3,~EAD_3> in
		let m3 = aeadenc(plaintext_3,'rep',K_3,IV_3) in
		let TH_4 = hash(wrap(TH_3) ||  plaintext_3 || pkI) in
		let PRK_out = edhoc_kdf(PRK_4e3m, 'seven', TH_4, hash_length) in
		event AcceptI(~cid,method_one,pkI,pkR,PRK_3e2m,PRK_4e3m,PRK_out,~X,G_Y);
		event SecretsI(~cid,method_one,pkI,pkR,PRK_2e,PRK_3e2m,PRK_4e3m,PRK_out,KEYSTREAM_2,K_3,IV_3,~X,G_Y);		
		event AcceptIData(PRK_out,method_one,pkI,pkR,~X,G_Y,<TH_2,TH_3,TH_4,suitesI, EAD_1, EAD_2, ~EAD_3, m1, plaintext_2, plaintext_3>);
		out(m3);
		  (
                ContactJudgeFromI(ID_CRED_R,TH_2,pkR,EAD_2,MAC_2, SIGNATURE_or_MAC_2)
                 |
		   leakSKey(PRK_out)
		  )
                )		

	     )

	else (if (method = method_two) then
	    (
	    
	    let pkR = get_sig_cred(ID_CRED_R) in 
	    let pkI = get_DH_cred(ID_CRED_I) in 
	    
	    let PRK_3e2m = PRK_2e in
	    
	    event DerivedIShared(pkI, G_YX); 
	    let MAC_2 = edhoc_kdf(PRK_3e2m,'two', <ID_CRED_R, TH_2,  pkR, EAD_2>, hash_length) in 
	    
            

event Verified (SIGNATURE_or_MAC_2,e1(SIGNATURE_or_MAC_2),e3(SIGNATURE_or_MAC_2),<'Signature1',ID_CRED_R,TH_2,pkR,EAD_2,MAC_2>, pkR , sigtrue);


	    	    
		(
		let TH_3 = hash(wrap(TH_2) || plaintext_2 || pkR) in
    	        event THIShared(pkI, TH_3); 		
		
                

let G_YI = G_Y^~I in


		let SALT_4e3m = edhoc_kdf(PRK_3e2m,'five',TH_3,hash_length) in
		let PRK_4e3m = hkdfextract(SALT_4e3m, G_YI) in 
		
		let MAC_3 = edhoc_kdf(PRK_4e3m, 'six', <ID_CRED_I, TH_3, pkI,~EAD_3>,hash_length) in
			    
		let SIGNATURE_or_MAC_3 = MAC_3 in // 2,3		
	        	

		let K_3 = edhoc_kdf(PRK_3e2m,'three',TH_3, key_length) in
		let IV_3 = edhoc_kdf(PRK_3e2m,'four',TH_3, iv_length) in
		let plaintext_3 = <ID_CRED_I, SIGNATURE_or_MAC_3,~EAD_3> in
		let m3 = aeadenc(plaintext_3,'rep',K_3,IV_3) in
		let TH_4 = hash(wrap(TH_3) ||  plaintext_3 || pkI) in
		let PRK_out = edhoc_kdf(PRK_4e3m, 'seven', TH_4, hash_length) in
		event AcceptI(~cid,method_two,pkI,pkR,PRK_3e2m,PRK_4e3m,PRK_out,~X,G_Y);
		event SecretsI(~cid,method_two,pkI,pkR,PRK_2e,PRK_3e2m,PRK_4e3m,PRK_out,KEYSTREAM_2,K_3,IV_3,~X,G_Y);		
		event AcceptIData(PRK_out,method_two,pkI,pkR,~X,G_Y,<TH_2,TH_3,TH_4,suitesI, EAD_1, EAD_2, ~EAD_3, m1, plaintext_2, plaintext_3>);
		out(m3);
		  (
                ContactJudgeFromI(ID_CRED_R,TH_2,pkR,EAD_2,MAC_2, SIGNATURE_or_MAC_2)
                 |
		   leakSKey(PRK_out)
		  )
                )		

	     )

	else (if (method = method_three) then
	    (
	    
	    let pkR = get_DH_cred(ID_CRED_R) in 
	    let pkI = get_DH_cred(ID_CRED_I) in 
	    
            

let pkRX = pkR^~X in


	    let SALT_3e2m = edhoc_kdf(PRK_2e, 'tone', TH_2, hash_length) in
	    let PRK_3e2m = hkdfextract(SALT_3e2m, pkRX) in
	    
	    event DerivedIShared(pkI, G_YX); 
	    let MAC_2 = edhoc_kdf(PRK_3e2m,'two', <ID_CRED_R, TH_2,  pkR, EAD_2>, hash_length) in 
	    	    
	    if (SIGNATURE_or_MAC_2 = MAC_2) then 
	    	    
		(
		let TH_3 = hash(wrap(TH_2) || plaintext_2 || pkR) in
    	        event THIShared(pkI, TH_3); 		
		
                

let G_YI = G_Y^~I in


		let SALT_4e3m = edhoc_kdf(PRK_3e2m,'five',TH_3,hash_length) in
		let PRK_4e3m = hkdfextract(SALT_4e3m, G_YI) in 
		
		let MAC_3 = edhoc_kdf(PRK_4e3m, 'six', <ID_CRED_I, TH_3, pkI,~EAD_3>,hash_length) in
			    
		let SIGNATURE_or_MAC_3 = MAC_3 in // 2,3		
	        	

		let K_3 = edhoc_kdf(PRK_3e2m,'three',TH_3, key_length) in
		let IV_3 = edhoc_kdf(PRK_3e2m,'four',TH_3, iv_length) in
		let plaintext_3 = <ID_CRED_I, SIGNATURE_or_MAC_3,~EAD_3> in
		let m3 = aeadenc(plaintext_3,'rep',K_3,IV_3) in
		let TH_4 = hash(wrap(TH_3) ||  plaintext_3 || pkI) in
		let PRK_out = edhoc_kdf(PRK_4e3m, 'seven', TH_4, hash_length) in
		event AcceptI(~cid,method_three,pkI,pkR,PRK_3e2m,PRK_4e3m,PRK_out,~X,G_Y);
		event SecretsI(~cid,method_three,pkI,pkR,PRK_2e,PRK_3e2m,PRK_4e3m,PRK_out,KEYSTREAM_2,K_3,IV_3,~X,G_Y);		
		event AcceptIData(PRK_out,method_three,pkI,pkR,~X,G_Y,<TH_2,TH_3,TH_4,suitesI, EAD_1, EAD_2, ~EAD_3, m1, plaintext_2, plaintext_3>);
		out(m3);
		  (
                ContactJudgeFromI(ID_CRED_R,TH_2,pkR,EAD_2,MAC_2, SIGNATURE_or_MAC_2)
                 |
		   leakSKey(PRK_out)
		  )
                )		
		
		
	     )
	)))
	
	)
    )   
   // no modeling of optional message 4



let R(~cid, ~skR,~R) =
    in(<C_R,EAD_2,suitesR>);
    in(<method,suitesI,G_X,C_I,EAD_1>);
    event MethodOk(method);    
    let m1 = <method,suitesI,G_X,C_I,EAD_1> in
    new ~Y;
    event Share(~Y);
    
    let G_R =  'g'^~R  in    
    
    let G_Y =  'g'^~Y  in
    

let G_XY = G_X^~Y in


    
    
    CompromiseShare(~Y) |
    
    (
    let CRED_R = pk(~skR) in
    
    let ID_CRED_R = id(CRED_R,G_R) in
    let TH_1 = hash(wrap(method) || wrap(suitesI) || wrap(G_X) || wrap(C_I) || EAD_1) in
    let TH_2 = hash( wrap(G_Y) || wrap(TH_1)) in    
    let PRK_2e = hkdfextract(TH_2, G_XY) in

    if (check_grp(G_X) = grpid) then // we test against the value testgrpid, which is either a useless constant or the neutral element of the group.
       0
    else   
       (

       
	if (method = method_zero) then
	   (	   
	   
	    let pkR = get_sig_cred(ID_CRED_R) in
	    
	    let PRK_3e2m = PRK_2e in
	    
	    let MAC_2 = edhoc_kdf(PRK_3e2m,'two', <ID_CRED_R, TH_2,  pkR, EAD_2>, hash_length) in 
	    
	    
let SIGNATURE_or_MAC_2 = sign(<'Signature1',ID_CRED_R,TH_2,pkR,EAD_2,MAC_2>, 'rep', ~skR) in

	    	    
	    let plaintext_2 = <C_R, ID_CRED_R, SIGNATURE_or_MAC_2, EAD_2> in
            let KEYSTREAM_2 = edhoc_kdf(PRK_2e,'tzero',TH_2,plaintext_length) in 	    
	    event DerivedR(~cid,pkR,PRK_3e2m,~Y,G_X);
	    event THRShared(pkR, TH_2); 	    
	    event DerivedRShared(pkR, G_XY); 
	    event DerivedIdR(ID_CRED_R,PRK_3e2m);
	    let m2 = <G_Y,encxor(plaintext_2,KEYSTREAM_2),C_R> in
            event SendRData(method_zero, pkR,<TH_2,suitesI, EAD_1, EAD_2, m1, plaintext_2>);							    
	    out(m2);	    
	    in(CIPHERTEXT_3);
	    let TH_3 = hash(wrap(TH_2) || plaintext_2 || pkR) in
            let K_3 = edhoc_kdf(PRK_3e2m,'three',TH_3, key_length) in
	    let IV_3 = edhoc_kdf(PRK_3e2m,'four',TH_3, iv_length) in	    
	    let plaintext_3 = aeaddec(CIPHERTEXT_3,K_3,IV_3) in
	    let <ID_CRED_I,SIGNATURE_or_MAC_3,EAD_3> = plaintext_3 in	    
	    let pkI = get_sig_cred(ID_CRED_I) in
	    let TH_4 = hash(wrap(TH_3) || plaintext_3 || pkI) in	    	    
   	    
	    let PRK_4e3m = PRK_3e2m in 
	    
   	    let MAC_3 = edhoc_kdf(PRK_4e3m, 'six', <ID_CRED_I, TH_3, pkI,EAD_3>,hash_length) in	    
	    
	    

event Verified (SIGNATURE_or_MAC_3,e1(SIGNATURE_or_MAC_3),e3(SIGNATURE_or_MAC_3),<'Signature2',ID_CRED_I,TH_3,pkI,EAD_3,MAC_3>, pkI , sigtrue);


	    
	        (if (ID_CRED_R = check_cred(ID_CRED_I)) then // Not in the standard: we test if we did not receive our own cred
		   0
		else   
		    (
  		    let PRK_out = edhoc_kdf(PRK_4e3m, 'seven', TH_4, hash_length) in
                    event AcceptR(~cid,method_zero,pkI,pkR,PRK_4e3m,PRK_out,~Y,G_X);
		    event SecretsR(~cid,method_zero,pkI,pkR,PRK_2e,PRK_3e2m,PRK_4e3m,PRK_out,KEYSTREAM_2,K_3,IV_3,~Y,G_X);						    
		    event AcceptRData(PRK_out,method_zero,pkI,pkR,~Y,G_X,<TH_2,TH_3,TH_4,suitesI, EAD_1, EAD_2, EAD_3, m1, plaintext_2, plaintext_3>);
		    (
		    ContactJudgeFromR(ID_CRED_I,TH_3,pkI,EAD_3,MAC_3,SIGNATURE_or_MAC_3,)
		    |
 		   leakSKey(PRK_out)
		    )
		    )
		  )  


	    )
	     
	else (if (method = method_one) then
	    (
	   
	    let pkR = get_DH_cred(ID_CRED_R) in
	    
            

let G_XR = G_X^~R in


	    let SALT_3e2m = edhoc_kdf(PRK_2e, 'tone', TH_2, hash_length) in	    
	    let PRK_3e2m = hkdfextract(SALT_3e2m, G_XR) in
	    
	    let MAC_2 = edhoc_kdf(PRK_3e2m,'two', <ID_CRED_R, TH_2,  pkR, EAD_2>, hash_length) in 
	    	    
	    let SIGNATURE_or_MAC_2 = MAC_2 in	    //1,3
	    	    
	    let plaintext_2 = <C_R, ID_CRED_R, SIGNATURE_or_MAC_2, EAD_2> in
            let KEYSTREAM_2 = edhoc_kdf(PRK_2e,'tzero',TH_2,plaintext_length) in 	    
	    event DerivedR(~cid,pkR,PRK_3e2m,~Y,G_X);
	    event THRShared(pkR, TH_2); 	    
	    event DerivedRShared(pkR, G_XY); 
	    event DerivedIdR(ID_CRED_R,PRK_3e2m);
	    let m2 = <G_Y,encxor(plaintext_2,KEYSTREAM_2),C_R> in
            event SendRData(method_one, pkR,<TH_2,suitesI, EAD_1, EAD_2, m1, plaintext_2>);							    
	    out(m2);	    
	    in(CIPHERTEXT_3);
	    let TH_3 = hash(wrap(TH_2) || plaintext_2 || pkR) in
            let K_3 = edhoc_kdf(PRK_3e2m,'three',TH_3, key_length) in
	    let IV_3 = edhoc_kdf(PRK_3e2m,'four',TH_3, iv_length) in	    
	    let plaintext_3 = aeaddec(CIPHERTEXT_3,K_3,IV_3) in
	    let <ID_CRED_I,SIGNATURE_or_MAC_3,EAD_3> = plaintext_3 in	    
	    let pkI = get_sig_cred(ID_CRED_I) in
	    let TH_4 = hash(wrap(TH_3) || plaintext_3 || pkI) in	    	    
   	    
	    let PRK_4e3m = PRK_3e2m in 
	    
   	    let MAC_3 = edhoc_kdf(PRK_4e3m, 'six', <ID_CRED_I, TH_3, pkI,EAD_3>,hash_length) in	    
	    
	    

event Verified (SIGNATURE_or_MAC_3,e1(SIGNATURE_or_MAC_3),e3(SIGNATURE_or_MAC_3),<'Signature2',ID_CRED_I,TH_3,pkI,EAD_3,MAC_3>, pkI , sigtrue);


	    
	        (if (ID_CRED_R = check_cred(ID_CRED_I)) then // Not in the standard: we test if we did not receive our own cred
		   0
		else   
		    (
  		    let PRK_out = edhoc_kdf(PRK_4e3m, 'seven', TH_4, hash_length) in
                    event AcceptR(~cid,method_one,pkI,pkR,PRK_4e3m,PRK_out,~Y,G_X);
		    event SecretsR(~cid,method_one,pkI,pkR,PRK_2e,PRK_3e2m,PRK_4e3m,PRK_out,KEYSTREAM_2,K_3,IV_3,~Y,G_X);						    
		    event AcceptRData(PRK_out,method_one,pkI,pkR,~Y,G_X,<TH_2,TH_3,TH_4,suitesI, EAD_1, EAD_2, EAD_3, m1, plaintext_2, plaintext_3>);
		    (
		    ContactJudgeFromR(ID_CRED_I,TH_3,pkI,EAD_3,MAC_3,SIGNATURE_or_MAC_3,)
		    |
 		   leakSKey(PRK_out)
		    )
		    )
		  )  


	    )

	else (if (method = method_two) then
	    (
	   
	    let pkR = get_sig_cred(ID_CRED_R) in
	    
	    let PRK_3e2m = PRK_2e in
	    
	    let MAC_2 = edhoc_kdf(PRK_3e2m,'two', <ID_CRED_R, TH_2,  pkR, EAD_2>, hash_length) in 
	    
	    
let SIGNATURE_or_MAC_2 = sign(<'Signature1',ID_CRED_R,TH_2,pkR,EAD_2,MAC_2>, 'rep', ~skR) in

	    	    
	    let plaintext_2 = <C_R, ID_CRED_R, SIGNATURE_or_MAC_2, EAD_2> in
            let KEYSTREAM_2 = edhoc_kdf(PRK_2e,'tzero',TH_2,plaintext_length) in 	    
	    event DerivedR(~cid,pkR,PRK_3e2m,~Y,G_X);
	    event THRShared(pkR, TH_2); 	    
	    event DerivedRShared(pkR, G_XY); 
	    event DerivedIdR(ID_CRED_R,PRK_3e2m);
	    let m2 = <G_Y,encxor(plaintext_2,KEYSTREAM_2),C_R> in
            event SendRData(method_two, pkR,<TH_2,suitesI, EAD_1, EAD_2, m1, plaintext_2>);							    
	    out(m2);	    
	    in(CIPHERTEXT_3);
	    let TH_3 = hash(wrap(TH_2) || plaintext_2 || pkR) in
            let K_3 = edhoc_kdf(PRK_3e2m,'three',TH_3, key_length) in
	    let IV_3 = edhoc_kdf(PRK_3e2m,'four',TH_3, iv_length) in	    
	    let plaintext_3 = aeaddec(CIPHERTEXT_3,K_3,IV_3) in
	    let <ID_CRED_I,SIGNATURE_or_MAC_3,EAD_3> = plaintext_3 in	    
	    let pkI = get_DH_cred(ID_CRED_I) in
	    let TH_4 = hash(wrap(TH_3) || plaintext_3 || pkI) in	    	    
   	    
            

let pkIY = pkI^~Y in


	    let SALT_4e3m = edhoc_kdf(PRK_3e2m,'five',TH_3,hash_length) in
	    let PRK_4e3m = hkdfextract(SALT_4e3m, pkIY) in 	    
	    
   	    let MAC_3 = edhoc_kdf(PRK_4e3m, 'six', <ID_CRED_I, TH_3, pkI,EAD_3>,hash_length) in	    
	    
	    if (SIGNATURE_or_MAC_3 = MAC_3) then
	    
	        (if (ID_CRED_R = check_cred(ID_CRED_I)) then // Not in the standard: we test if we did not receive our own cred
		   0
		else   
		    (
  		    let PRK_out = edhoc_kdf(PRK_4e3m, 'seven', TH_4, hash_length) in
                    event AcceptR(~cid,method_two,pkI,pkR,PRK_4e3m,PRK_out,~Y,G_X);
		    event SecretsR(~cid,method_two,pkI,pkR,PRK_2e,PRK_3e2m,PRK_4e3m,PRK_out,KEYSTREAM_2,K_3,IV_3,~Y,G_X);						    
		    event AcceptRData(PRK_out,method_two,pkI,pkR,~Y,G_X,<TH_2,TH_3,TH_4,suitesI, EAD_1, EAD_2, EAD_3, m1, plaintext_2, plaintext_3>);
		    (
		    ContactJudgeFromR(ID_CRED_I,TH_3,pkI,EAD_3,MAC_3,SIGNATURE_or_MAC_3,)
		    |
 		   leakSKey(PRK_out)
		    )
		    )
		  )  


	    )

	else (if (method = method_three) then
	    (
   	   
	    let pkR = get_DH_cred(ID_CRED_R) in
	    
            

let G_XR = G_X^~R in


	    let SALT_3e2m = edhoc_kdf(PRK_2e, 'tone', TH_2, hash_length) in	    
	    let PRK_3e2m = hkdfextract(SALT_3e2m, G_XR) in
	    
	    let MAC_2 = edhoc_kdf(PRK_3e2m,'two', <ID_CRED_R, TH_2,  pkR, EAD_2>, hash_length) in 
	    	    
	    let SIGNATURE_or_MAC_2 = MAC_2 in	    //1,3
	    	    
	    let plaintext_2 = <C_R, ID_CRED_R, SIGNATURE_or_MAC_2, EAD_2> in
            let KEYSTREAM_2 = edhoc_kdf(PRK_2e,'tzero',TH_2,plaintext_length) in 	    
	    event DerivedR(~cid,pkR,PRK_3e2m,~Y,G_X);
	    event THRShared(pkR, TH_2); 	    
	    event DerivedRShared(pkR, G_XY); 
	    event DerivedIdR(ID_CRED_R,PRK_3e2m);
	    let m2 = <G_Y,encxor(plaintext_2,KEYSTREAM_2),C_R> in
            event SendRData(method_three, pkR,<TH_2,suitesI, EAD_1, EAD_2, m1, plaintext_2>);							    
	    out(m2);	    
	    in(CIPHERTEXT_3);
	    let TH_3 = hash(wrap(TH_2) || plaintext_2 || pkR) in
            let K_3 = edhoc_kdf(PRK_3e2m,'three',TH_3, key_length) in
	    let IV_3 = edhoc_kdf(PRK_3e2m,'four',TH_3, iv_length) in	    
	    let plaintext_3 = aeaddec(CIPHERTEXT_3,K_3,IV_3) in
	    let <ID_CRED_I,SIGNATURE_or_MAC_3,EAD_3> = plaintext_3 in	    
	    let pkI = get_DH_cred(ID_CRED_I) in
	    let TH_4 = hash(wrap(TH_3) || plaintext_3 || pkI) in	    	    
   	    
            

let pkIY = pkI^~Y in


	    let SALT_4e3m = edhoc_kdf(PRK_3e2m,'five',TH_3,hash_length) in
	    let PRK_4e3m = hkdfextract(SALT_4e3m, pkIY) in 	    
	    
   	    let MAC_3 = edhoc_kdf(PRK_4e3m, 'six', <ID_CRED_I, TH_3, pkI,EAD_3>,hash_length) in	    
	    
	    if (SIGNATURE_or_MAC_3 = MAC_3) then
	    
	        (if (ID_CRED_R = check_cred(ID_CRED_I)) then // Not in the standard: we test if we did not receive our own cred
		   0
		else   
		    (
  		    let PRK_out = edhoc_kdf(PRK_4e3m, 'seven', TH_4, hash_length) in
                    event AcceptR(~cid,method_three,pkI,pkR,PRK_4e3m,PRK_out,~Y,G_X);
		    event SecretsR(~cid,method_three,pkI,pkR,PRK_2e,PRK_3e2m,PRK_4e3m,PRK_out,KEYSTREAM_2,K_3,IV_3,~Y,G_X);						    
		    event AcceptRData(PRK_out,method_three,pkI,pkR,~Y,G_X,<TH_2,TH_3,TH_4,suitesI, EAD_1, EAD_2, EAD_3, m1, plaintext_2, plaintext_3>);
		    (
		    ContactJudgeFromR(ID_CRED_I,TH_3,pkI,EAD_3,MAC_3,SIGNATURE_or_MAC_3,)
		    |
 		   leakSKey(PRK_out)
		    )
		    )
		  )  


	    )
	 )))   
	    

   	 )
      )
	
let compromise(sk) =
    in('Comp'); event Compromise(pk(sk)); out(sk)

let compromiseDH(k) =
    in('Comp'); event Compromise( 'g'^k ); event Leak(k); out(k)

      
process:
(! MakeDEO)
|
(!JudgeR)
|
(!JudgeI)
|
!(new ~sk; new ~ltdh; new ~computerId;
    let idd = id(pk(~sk), 'g'^~ltdh ) in 
    out(<idd, pk(~sk), 'g'^~ltdh >);
    event ShareLT(~ltdh);
      event Honest(pk(~sk));
      event Honest( 'g'^~ltdh );   
( (! in(cred); I(~computerId,~sk, ~ltdh, cred)) | (!R(~computerId,~sk,~ltdh)) | compromise(~sk) | compromiseDH(~ltdh)) )




#include "LakeProperties.splib"




// *************************************************************
// ************** Anonimity  ***********************************
// *************************************************************

#ifdef diffEquiv

/* 

# draft 17, p. 42 EDHOC provides identity  protection of the Initiator against active attacks
*/


diffEquivLemma: // Anonymity as a diff equivalence
!(  new ~sk1; new ~ltdh1; new ~computerId1;
    let idd1 = id(pk(~sk1),  'g'^~ltdh1 ) in 
    out(<idd1, pk(~sk1)>);
    new ~sk2; new ~ltdh2; new ~computerId2;
    let idd2=id(pk(~sk2),  'g'^~ltdh2 ) in
    out(<idd2,pk(~sk2)>);
    (
     (! in(cred);I(~computerId1,~sk1,~ltdh1,cred)) | (! in(cred);I(~computerId2,~sk2,~ltdh2,cred)) |
     (!R(~computerId1,~sk1,~ltdh1)) | (!R(~computerId2,~sk2,~ltdh2)) |
     (! I(diff(~computerId1,~computerId2),diff(~sk1,~sk2),diff(~ltdh1,~ltdh2),idd1) ) | // test sessions with sk1 as responder
     compromise(~sk2) // sk1 must not be compromised as it is the responder
    )
)

/*
diffEquivLemma: // Anonymity as a diff equivalence for only 2 sessions
    new ~sk1; new ~ltdh1; new ~computerId1;
    let idd1 = id(pk(~sk1), 'g'^~ltdh1) in 
    out(<idd1, pk(~sk1)>);
    new ~sk2; new ~ltdh2;
    new ~computerId2;
    let idd2=id(pk(~sk2), 'g'^~ltdh2) in
    out(<idd2,pk(~sk2)>);
    (
       I(diff(~computerId1,~computerId2),diff(~sk1,~sk2),diff(~ltdh1,~ltdh2),idd1)
     | R(~computerId1,~sk1,~ltdh1)
     | compromise(~sk2,idd2)
    )
*/

#endif

#ifdef EquivLemmas

equivLemma: // Anonymity
(
    new ~sk1; new ~ltdh1; new ~computerId1;
    let idd1 = id(pk(~sk1),  'g'^~ltdh1 ) in 
    out(<idd1, pk(~sk1)>);
    new ~sk2; new ~ltdh2;
    new ~computerId2;
    let idd2=id(pk(~sk2),  'g'^~ltdh2 ) in
    out(<idd2,pk(~sk2)>);
    (
       I(~computerId1,~sk1,~ltdh1,idd1)
     | R(~computerId1,~sk1,~ltdh1)
     | compromise(~sk2)
    )
)

(
    new ~sk1; new ~ltdh1; new ~computerId1;
    let idd1 = id(pk(~sk1),  'g'^~ltdh1 ) in 
    out(<idd1, pk(~sk1)>);
    new ~sk2; new ~ltdh2;
    new ~computerId2;
    let idd2=id(pk(~sk2),  'g'^~ltdh2 ) in
    out(<idd2,pk(~sk2)>);
    (
       I(~computerId2,~sk2,~ltdh2,idd1)
     | R(~computerId1,~sk1,~ltdh1)
     | compromise(~sk2)
    )
)



equivLemma: // Unlinkability
(
    new ~sk1; new ~ltdh1; new ~computerId1;
    let idd1 = id(pk(~sk1),  'g'^~ltdh1 ) in 
    out(<idd1, pk(~sk1)>);
    new ~sk2; new ~ltdh2;
    new ~computerId2;
    let idd2=id(pk(~sk2),  'g'^~ltdh2 ) in
    out(<idd2,pk(~sk2)>);
    (
       I(~computerId1,~sk1,~ltdh1,idd2)
     | I(~computerId1,~sk1,~ltdh1,idd2)
     | R(~computerId2,~sk2,~ltdh2)
     | R(~computerId2,~sk2,~ltdh2)
    )
)

(
    new ~sk1; new ~ltdh1; new ~computerId1;
    let idd1 = id(pk(~sk1),  'g'^~ltdh1 ) in 
    out(<idd1, pk(~sk1)>);
    new ~sk2; new ~ltdh2;
    new ~computerId2;
    let idd2=id(pk(~sk2),  'g'^~ltdh2 ) in
    out(att,<idd2,pk(~sk2)>);
    (
       I(~computerId1,~sk1,~ltdh1,idd2)
     | I(~computerId2,~sk2,~ltdh2,idd2)
     | R(~computerId2,~sk2,~ltdh2)
     | R(~computerId2,~sk2,~ltdh2)
    )
)

#endif 



end