theory coll


// tamarin-prover ChosenPrefixCollisions.spthy -D=AttackerDomainFresh -D=CR --prove

// Minimal model to obtain the Chosen Prefix Collisions
//  tamarin-prover ChosenPrefixCollisions.spthy -D=AttackerDomainFresh -D=CPcol -D=LEcol --prove


begin

builtins: concatenation

functions: wrap/1

#include "HashLibrary.splib"

rule init1:
[ Fr(~G_X)]
--[OnceI()]->[Out(~G_X), I(~G_X)]

rule init2:
 let tohashTH_1 = 'method' || 'suitesI' || wrap(~G_X) || 'C_I' || 'EAD_1'
     tohashTH_2 = wrap(G_Y) || C_R || hval1 in 
[ I(~G_X), In(<G_Y,C_R>)]
--[
   HashC(tohashTH_1,hval1),
   HashC(tohashTH_2,hval2),
   AuthI(~G_X,G_Y,hval2)
   ]->[]


rule resp:
 let tohashTH_1 = 'method' || 'suitesI' || wrap(G_X) || 'C_I' || EAD_1
     tohashTH_2 =   wrap(~G_Y) || 'C_R' || hval1 in
 [Fr(~G_Y), In(<G_X,'C_I',EAD_1>)]
 --[OnceR(),
 HashC(tohashTH_1, hval1),
 HashC(tohashTH_2, hval2), 
 AuthR(G_X,~G_Y,hval2)]->[Out(~G_Y)]


restriction FixedSize:
 "All x #i. FixedSize(x)@i ==> not (Ex k l. x = k || l)"

restriction OnceI:
 "All #i #j. OnceI()@i & OnceI()@j ==> #i=#j"

restriction OnceR:
 "All #i #j. OnceR()@i & OnceR()@j ==> #i=#j"

lemma nocol:
 "All gx gy gx2 gy2 hv #i #j. AuthI(gx,gy,hv)@i & AuthR(gx2,gy2,hv)@j  ==> gx=gx2 & gy=gy2"

end