filename; lemma; threat; res; time
lake-edhoc.spthy;  --lemma=secretI;  -D=NeutralCheck; RESULT event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x,gy))@i && attacker(k4)@j && event(Honest(pkR_8))@k ==> (event(Compromise(pkR_8))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(gy))@t || event(LeakShare(x))@t is true. ; 48;
lake-edhoc.spthy;  --lemma=authIR_unique;  -D=NeutralCheck; RESULT event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x,gy))@i && event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x2,gy2))@j ==> i = j is true. ; 48;
lake-edhoc.spthy;  --lemma=secretI;  -D=CredCheck; RESULT event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x,gy))@i && attacker(k4)@j && event(Honest(pkR_8))@k ==> (event(Compromise(pkR_8))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(gy))@t || event(LeakShare(x))@t is true. ; 50;
lake-edhoc.spthy;  --lemma=secretI; ; RESULT event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x,gy))@i && attacker(k4)@j && event(Honest(pkR_8))@k ==> (event(Compromise(pkR_8))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(gy))@t || event(LeakShare(x))@t is true. ; 50;
lake-edhoc.spthy;  --lemma=authIR_unique; ; RESULT event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x,gy))@i && event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x2,gy2))@j ==> i = j is false. ; 51;
lake-edhoc.spthy;  --lemma=secretR;  -D=NeutralCheck; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && attacker(k4)@j && event(Honest(pkI_8))@k ==> (event(Compromise(pkI_8))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(y))@t || event(LeakShare(gx))@t is true. ; 51;
lake-edhoc.spthy;  --lemma=secretI;  -D=WeakAEAD; RESULT event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x,gy))@i && attacker(k4)@j && event(Honest(pkR_8))@k ==> (event(Compromise(pkR_8))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(gy))@t || event(LeakShare(x))@t is true. ; 51;
lake-edhoc.spthy;  --lemma=authRI_unique;  -D=NeutralCheck; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y1,gx1))@i && event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y2,gx2))@j ==> i = j is true. ; 52;
lake-edhoc.spthy;  --lemma=secretR;  -D=CredCheck; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && attacker(k4)@j && event(Honest(pkI_8))@k ==> (event(Compromise(pkI_8))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(y))@t || event(LeakShare(gx))@t is true. ; 52;
lake-edhoc.spthy;  --lemma=secretR;  -D=WeakAEAD; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && attacker(k4)@j && event(Honest(pkI_8))@k ==> (event(Compromise(pkI_8))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(y))@t || event(LeakShare(gx))@t is true. ; 53;
lake-edhoc.spthy;  --lemma=secretR; ; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && attacker(k4)@j && event(Honest(pkI_8))@k ==> (event(Compromise(pkI_8))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(y))@t || event(LeakShare(gx))@t is true. ; 53;
lake-edhoc.spthy;  --lemma=authRI_unique; ; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y1,gx1))@i && event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y2,gx2))@j ==> i = j is false. ; 56;
lake-edhoc.spthy;  --lemma=authRI_unique;  -D=CredCheck; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y1,gx1))@i && event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y2,gx2))@j ==> i = j is false. ; 56;
lake-edhoc.spthy;  --lemma=authRI_unique;  -D=WeakAEAD; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y1,gx1))@i && event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y2,gx2))@j ==> i = j is false. ; 56;
lake-edhoc.spthy;  --lemma=authIR_unique;  -D=NeutralCheck -D=WeakestSignature; RESULT event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x,gy))@i && event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x2,gy2))@j ==> i = j is true. ; 59;
lake-edhoc.spthy;  --lemma=secretI;  -D=NeutralCheck -D=WeakestSignature; RESULT event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x,gy))@i && attacker(k4)@j && event(Honest(pkR_8))@k ==> (event(Compromise(pkR_8))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(gy))@t || event(LeakShare(x))@t is true. ; 60;
lake-edhoc.spthy;  --lemma=authRI_unique;  -D=NeutralCheck -D=WeakestSignature; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y1,gx1))@i && event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y2,gx2))@j ==> i = j is true. ; 62;
lake-edhoc.spthy;  --lemma=secretR;  -D=NeutralCheck -D=WeakestSignature; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && attacker(k4)@j && event(Honest(pkI_8))@k ==> (event(Compromise(pkI_8))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(y))@t || event(LeakShare(gx))@t is true. ; 64;
lake-edhoc.spthy;  --lemma=secretI;  -D=NeutralCheck -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x,gy))@i && attacker(k4)@j && event(Honest(pkR_8))@k ==> (event(Compromise(pkR_8))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(gy))@t || event(LeakShare(x))@t is true. ; 95;
lake-edhoc.spthy;  --lemma=authRI_unique;  -D=NeutralCheck -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y1,gx1))@i && event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y2,gx2))@j ==> i = j is true. ; 100;
lake-edhoc.spthy;  --lemma=secretR;  -D=NeutralCheck -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && attacker(k4)@j && event(Honest(pkI_8))@k ==> (event(Compromise(pkI_8))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(y))@t || event(LeakShare(gx))@t is true. ; 102;
lake-edhoc.spthy;  --lemma=secretI;  -D=XorPrecise; RESULT event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x,gy))@i && attacker(k4)@j && event(Honest(pkR_8))@k ==> (event(Compromise(pkR_8))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(gy))@t || event(LeakShare(x))@t is true. ; 103;
lake-edhoc.spthy;  --lemma=authRI_unique;  -D=XorPrecise; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y1,gx1))@i && event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y2,gx2))@j ==> i = j is false. ; 110;
lake-edhoc.spthy;  --lemma=secretR;  -D=XorPrecise; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && attacker(k4)@j && event(Honest(pkI_8))@k ==> (event(Compromise(pkI_8))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(y))@t || event(LeakShare(gx))@t is true. ; 110;
lake-edhoc.spthy;  --lemma=authRI_unique;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y1,gx1))@i && event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y2,gx2))@j ==> i = j is false. ; 959;
lake-edhoc.spthy;  --lemma=secretI;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x,gy))@i && attacker(k4)@j && event(Honest(pkR_8))@k ==> (event(Compromise(pkR_8))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(gy))@t || event(LeakShare(x))@t is true. ; 1306;
lake-edhoc.spthy;  --lemma=secretR;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && attacker(k4)@j && event(Honest(pkI_8))@k ==> (event(Compromise(pkI_8))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(y))@t || event(LeakShare(gx))@t is true. ; 1361;
lake-edhoc.spthy;  --lemma=authRI_unique;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey -D=XorPrecise -D=WeakAEAD; ; 1837;
lake-edhoc.spthy;  --lemma=secretR;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey -D=XorPrecise -D=WeakAEAD; ; 1838;
lake-edhoc.spthy;  --lemma=secretI;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey -D=XorPrecise -D=WeakAEAD; ; 1844;
lake-edhoc.spthy;  --lemma=authIR_unique;  -D=CredCheck; RESULT event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x,gy))@i && event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x2,gy2))@j ==> i = j is false. ; 53;
lake-edhoc.spthy;  --lemma=authIR_unique;  -D=WeakAEAD; RESULT event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x,gy))@i && event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x2,gy2))@j ==> i = j is false. ; 53;
lake-edhoc.spthy;  --lemma=honestauthRI_non_inj;  -D=WeakAEAD; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && event(Honest(pkI_8))@k ==> (i > t && event(AcceptI(cid2,m,pkI_8,pkR_8,k3,k4,x,gy))@t) || event(Compromise(pkI_8))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) is true. ; 55;
lake-edhoc.spthy;  --lemma=no_reflection_attacks_RI;  -D=NeutralCheck; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && event(Honest(pkI_8))@k ==> (i > t && event(AcceptI(cid2,m,pkI_8,pkR_8,k3,k4,x,gy))@t && cid_2 ≠ cid2) || event(Compromise(pkI_8))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) || event(LeakShare(gx))@t is false. ; 55;
lake-edhoc.spthy;  --lemma=honestauthRI_non_inj;  -D=NeutralCheck; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && event(Honest(pkI_8))@k ==> (i > t && event(AcceptI(cid2,m,pkI_8,pkR_8,k3,k4,x,gy))@t) || event(Compromise(pkI_8))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) is true. ; 55;
lake-edhoc.spthy;  --lemma=honestauthRI_non_inj;  -D=CredCheck; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && event(Honest(pkI_8))@k ==> (i > t && event(AcceptI(cid2,m,pkI_8,pkR_8,k3,k4,x,gy))@t) || event(Compromise(pkI_8))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) is true. ; 55;
lake-edhoc.spthy;  --lemma=honestauthRI_non_inj; ; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && event(Honest(pkI_8))@k ==> (i > t && event(AcceptI(cid2,m,pkI_8,pkR_8,k3,k4,x,gy))@t) || event(Compromise(pkI_8))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) is true. ; 56;
lake-edhoc.spthy;  --lemma=no_reflection_attacks_RI; ; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && event(Honest(pkI_8))@k ==> (i > t && event(AcceptI(cid2,m,pkI_8,pkR_8,k3,k4,x,gy))@t && cid_2 ≠ cid2) || event(Compromise(pkI_8))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) || event(LeakShare(gx))@t is false. ; 55;
lake-edhoc.spthy;  --lemma=no_reflection_attacks_RI;  -D=CredCheck; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && event(Honest(pkI_8))@k ==> (i > t && event(AcceptI(cid2,m,pkI_8,pkR_8,k3,k4,x,gy))@t && cid_2 ≠ cid2) || event(Compromise(pkI_8))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) || event(LeakShare(gx))@t is true. ; 56;
lake-edhoc.spthy;  --lemma=no_reflection_attacks_RI;  -D=NeutralCheck -D=WeakestSignature; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && event(Honest(pkI_8))@k ==> (i > t && event(AcceptI(cid2,m,pkI_8,pkR_8,k3,k4,x,gy))@t && cid_2 ≠ cid2) || event(Compromise(pkI_8))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) || event(LeakShare(gx))@t is false. ; 63;
lake-edhoc.spthy;  --lemma=honestauthRI_non_inj;  -D=NeutralCheck -D=WeakestSignature; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && event(Honest(pkI_8))@k ==> (i > t && event(AcceptI(cid2,m,pkI_8,pkR_8,k3,k4,x,gy))@t) || event(Compromise(pkI_8))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) is true. ; 65;
lake-edhoc.spthy;  --lemma=authIR_unique;  -D=NeutralCheck -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x,gy))@i && event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x2,gy2))@j ==> i = j is true. ; 95;
lake-edhoc.spthy;  --lemma=authIR_unique;  -D=XorPrecise; RESULT event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x,gy))@i && event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x2,gy2))@j ==> i = j is false. ; 99;
lake-edhoc.spthy;  --lemma=no_reflection_attacks_RI;  -D=NeutralCheck -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && event(Honest(pkI_8))@k ==> (i > t && event(AcceptI(cid2,m,pkI_8,pkR_8,k3,k4,x,gy))@t && cid_2 ≠ cid2) || event(Compromise(pkI_8))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) || event(LeakShare(gx))@t is false. ; 99;
lake-edhoc.spthy;  --lemma=honestauthRI_non_inj;  -D=NeutralCheck -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && event(Honest(pkI_8))@k ==> (i > t && event(AcceptI(cid2,m,pkI_8,pkR_8,k3,k4,x,gy))@t) || event(Compromise(pkI_8))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) is true. ; 101;
lake-edhoc.spthy;  --lemma=honestauthRI_non_inj;  -D=XorPrecise; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && event(Honest(pkI_8))@k ==> (i > t && event(AcceptI(cid2,m,pkI_8,pkR_8,k3,k4,x,gy))@t) || event(Compromise(pkI_8))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) is true. ; 108;
lake-edhoc.spthy;  --lemma=authIR_unique;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x,gy))@i && event(AcceptI(cid_2,m,pkI_8,pkR_8,k3,k4,x2,gy2))@j ==> i = j is false. ; 798;
lake-edhoc.spthy;  --lemma=no_reflection_attacks_RI;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && event(Honest(pkI_8))@k ==> (i > t && event(AcceptI(cid2,m,pkI_8,pkR_8,k3,k4,x,gy))@t && cid_2 ≠ cid2) || event(Compromise(pkI_8))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) || event(LeakShare(gx))@t is false. ; 882;
lake-edhoc.spthy;  --lemma=honestauthRI_non_inj;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && event(Honest(pkI_8))@k ==> (i > t && event(AcceptI(cid2,m,pkI_8,pkR_8,k3,k4,x,gy))@t) || event(Compromise(pkI_8))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) is false. ; 882;
lake-edhoc.spthy;  --lemma=authIR_unique;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey -D=XorPrecise -D=WeakAEAD; ; 1844;
lake-edhoc.spthy;  --lemma=honestauthRI_non_inj;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey -D=XorPrecise -D=WeakAEAD; ; 1847;
lake-edhoc.spthy;  --lemma=data_authentication_I_to_R;  -D=WeakAEAD; RESULT event(AcceptIData(PRK_4x3m_8,method_2,pkI_8,pkR_8,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_2,(m2_5,m3)))))))))))@i && event(Honest(pkR_8))@j ==> (i > l && event(SendRData(method_2,pkR_8,(TH_2,(suitesI_2,(EAD_1,(EAD_2,(m11,m22)))))))@l) || (i > l && event(Compromise(pkR_8))@l) || (event(LeakShare(x))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 55;
lake-edhoc.spthy;  --lemma=data_authentication_I_to_R;  -D=NeutralCheck; RESULT event(AcceptIData(PRK_4x3m_8,method_2,pkI_8,pkR_8,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_2,(m2_5,m3)))))))))))@i && event(Honest(pkR_8))@j ==> (i > l && event(SendRData(method_2,pkR_8,(TH_2,(suitesI_2,(EAD_1,(EAD_2,(m11,m22)))))))@l) || (i > l && event(Compromise(pkR_8))@l) || (event(LeakShare(x))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 55;
lake-edhoc.spthy;  --lemma=data_authentication_I_to_R; ; RESULT event(AcceptIData(PRK_4x3m_8,method_2,pkI_8,pkR_8,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_2,(m2_5,m3)))))))))))@i && event(Honest(pkR_8))@j ==> (i > l && event(SendRData(method_2,pkR_8,(TH_2,(suitesI_2,(EAD_1,(EAD_2,(m11,m22)))))))@l) || (i > l && event(Compromise(pkR_8))@l) || (event(LeakShare(x))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 55;
lake-edhoc.spthy;  --lemma=data_authentication_I_to_R;  -D=CredCheck; RESULT event(AcceptIData(PRK_4x3m_8,method_2,pkI_8,pkR_8,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_2,(m2_5,m3)))))))))))@i && event(Honest(pkR_8))@j ==> (i > l && event(SendRData(method_2,pkR_8,(TH_2,(suitesI_2,(EAD_1,(EAD_2,(m11,m22)))))))@l) || (i > l && event(Compromise(pkR_8))@l) || (event(LeakShare(x))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 56;
lake-edhoc.spthy;  --lemma=no_reflection_attacks_RI;  -D=WeakAEAD; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && event(Honest(pkI_8))@k ==> (i > t && event(AcceptI(cid2,m,pkI_8,pkR_8,k3,k4,x,gy))@t && cid_2 ≠ cid2) || event(Compromise(pkI_8))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) || event(LeakShare(gx))@t is false. ; 58;
lake-edhoc.spthy;  --lemma=data_authentication_R_to_I;  -D=NeutralCheck; RESULT event(AcceptRData(PRK_4x3m_8,method_2,pkI_8,pkR_8,y,gx,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_2,(m2_5,m3)))))))))))@i && event(Honest(pkI_8))@j ==> (i > l && event(AcceptIData(PRK_4x3m_8,method_2,pkI_8,pkR_8,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m11,(m22,m33)))))))))))@l) || (i > l && event(Compromise(pkI_8))@l) || (event(LeakShare(y))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 60;
lake-edhoc.spthy;  --lemma=data_authentication_R_to_I; ; RESULT event(AcceptRData(PRK_4x3m_8,method_2,pkI_8,pkR_8,y,gx,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_2,(m2_5,m3)))))))))))@i && event(Honest(pkI_8))@j ==> (i > l && event(AcceptIData(PRK_4x3m_8,method_2,pkI_8,pkR_8,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m11,(m22,m33)))))))))))@l) || (i > l && event(Compromise(pkI_8))@l) || (event(LeakShare(y))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 61;
lake-edhoc.spthy;  --lemma=data_authentication_I_to_R;  -D=NeutralCheck -D=WeakestSignature; RESULT event(AcceptIData(PRK_4x3m_8,method_2,pkI_8,pkR_8,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_3,(m2_6,m3)))))))))))@i && event(Honest(pkR_8))@j ==> (i > l && event(SendRData(method_2,pkR_8,(TH_2,(suitesI_2,(EAD_1,(EAD_2,(m11,m22)))))))@l) || (i > l && event(Compromise(pkR_8))@l) || (event(LeakShare(x))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 61;
lake-edhoc.spthy;  --lemma=data_authentication_R_to_I;  -D=CredCheck; RESULT event(AcceptRData(PRK_4x3m_8,method_2,pkI_8,pkR_8,y,gx,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_2,(m2_5,m3)))))))))))@i && event(Honest(pkI_8))@j ==> (i > l && event(AcceptIData(PRK_4x3m_8,method_2,pkI_8,pkR_8,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m11,(m22,m33)))))))))))@l) || (i > l && event(Compromise(pkI_8))@l) || (event(LeakShare(y))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 62;
lake-edhoc.spthy;  --lemma=data_authentication_R_to_I;  -D=WeakAEAD; RESULT event(AcceptRData(PRK_4x3m_8,method_2,pkI_8,pkR_8,y,gx,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_2,(m2_5,m3)))))))))))@i && event(Honest(pkI_8))@j ==> (i > l && event(AcceptIData(PRK_4x3m_8,method_2,pkI_8,pkR_8,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m11,(m22,m33)))))))))))@l) || (i > l && event(Compromise(pkI_8))@l) || (event(LeakShare(y))@l && (method_2 = method_two || method_2 = method_three)) is false. ; 65;
lake-edhoc.spthy;  --lemma=data_authentication_I_to_R;  -D=XorPrecise; RESULT event(AcceptIData(PRK_4x3m_8,method_2,pkI_8,pkR_8,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_2,(m2_5,m3)))))))))))@i && event(Honest(pkR_8))@j ==> (i > l && event(SendRData(method_2,pkR_8,(TH_2,(suitesI_2,(EAD_1,(EAD_2,(m11,m22)))))))@l) || (i > l && event(Compromise(pkR_8))@l) || (event(LeakShare(x))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 73;
lake-edhoc.spthy;  --lemma=data_authentication_R_to_I;  -D=NeutralCheck -D=WeakestSignature; RESULT event(AcceptRData(PRK_4x3m_8,method_2,pkI_8,pkR_8,y,gx,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_3,(m2_6,m3)))))))))))@i && event(Honest(pkI_8))@j ==> (i > l && event(AcceptIData(PRK_4x3m_8,method_2,pkI_8,pkR_8,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m11,(m22,m33)))))))))))@l) || (i > l && event(Compromise(pkI_8))@l) || (event(LeakShare(y))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 77;
lake-edhoc.spthy;  --lemma=data_authentication_I_to_R;  -D=NeutralCheck -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptIData(PRK_4x3m_8,method_2,pkI_8,pkR_8,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_3,(m2_6,m3)))))))))))@i && event(Honest(pkR_8))@j ==> (i > l && event(SendRData(method_2,pkR_8,(TH_2,(suitesI_2,(EAD_1,(EAD_2,(m11,m22)))))))@l) || (i > l && event(Compromise(pkR_8))@l) || (event(LeakShare(x))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 79;
lake-edhoc.spthy;  --lemma=no_reflection_attacks_RI;  -D=XorPrecise; RESULT event(AcceptR(cid_2,m,pkI_8,pkR_8,k4,y,gx))@i && event(Honest(pkI_8))@k ==> (i > t && event(AcceptI(cid2,m,pkI_8,pkR_8,k3,k4,x,gy))@t && cid_2 ≠ cid2) || event(Compromise(pkI_8))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) || event(LeakShare(gx))@t is false. ; 104;
lake-edhoc.spthy;  --lemma=data_authentication_R_to_I;  -D=XorPrecise; RESULT event(AcceptRData(PRK_4x3m_8,method_2,pkI_8,pkR_8,y,gx,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_2,(m2_5,m3)))))))))))@i && event(Honest(pkI_8))@j ==> (i > l && event(AcceptIData(PRK_4x3m_8,method_2,pkI_8,pkR_8,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m11,(m22,m33)))))))))))@l) || (i > l && event(Compromise(pkI_8))@l) || (event(LeakShare(y))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 154;
lake-edhoc.spthy;  --lemma=data_authentication_R_to_I;  -D=NeutralCheck -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptRData(PRK_4x3m_8,method_2,pkI_8,pkR_8,y,gx,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_3,(m2_6,m3)))))))))))@i && event(Honest(pkI_8))@j ==> (i > l && event(AcceptIData(PRK_4x3m_8,method_2,pkI_8,pkR_8,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m11,(m22,m33)))))))))))@l) || (i > l && event(Compromise(pkI_8))@l) || (event(LeakShare(y))@l && (method_2 = method_two || method_2 = method_three)) is false. ; 161;
lake-edhoc.spthy;  --lemma=data_authentication_I_to_R;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptIData(PRK_4x3m_8,method_2,pkI_8,pkR_8,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_3,(m2_6,m3)))))))))))@i && event(Honest(pkR_8))@j ==> (i > l && event(SendRData(method_2,pkR_8,(TH_2,(suitesI_2,(EAD_1,(EAD_2,(m11,m22)))))))@l) || (i > l && event(Compromise(pkR_8))@l) || (event(LeakShare(x))@l && (method_2 = method_two || method_2 = method_three)) is false. ; 229;
lake-edhoc.spthy;  --lemma=data_authentication_R_to_I;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptRData(PRK_4x3m_8,method_2,pkI_8,pkR_8,y,gx,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_3,(m2_6,m3)))))))))))@i && event(Honest(pkI_8))@j ==> (i > l && event(AcceptIData(PRK_4x3m_8,method_2,pkI_8,pkR_8,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m11,(m22,m33)))))))))))@l) || (i > l && event(Compromise(pkI_8))@l) || (event(LeakShare(y))@l && (method_2 = method_two || method_2 = method_three)) is false. ; 1361;
lake-edhoc.spthy;  --lemma=data_authentication_I_to_R;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey -D=XorPrecise -D=WeakAEAD; ; 1847;
lake-edhoc.spthy;  --lemma=data_authentication_R_to_I;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey -D=XorPrecise -D=WeakAEAD; ; 1849;
lake-edhoc.spthy;  --lemma=no_reflection_attacks_RI;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey -D=XorPrecise -D=WeakAEAD; ; 1850;
lake-edhoc-KEM.spthy;  --lemma=secretI; ; RESULT event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x,gy))@i && attacker(k4)@j && event(Honest(pkR_2))@k ==> (event(Compromise(pkR_2))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(gy))@t || event(LeakShare(x))@t is true. ; 22;
lake-edhoc-KEM.spthy;  --lemma=secretI;  -D=WeakAEAD; RESULT event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x,gy))@i && attacker(k4)@j && event(Honest(pkR_2))@k ==> (event(Compromise(pkR_2))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(gy))@t || event(LeakShare(x))@t is true. ; 23;
lake-edhoc-KEM.spthy;  --lemma=authIR_unique; ; RESULT event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x,gy))@i && event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x2,gy2))@j ==> i = j is false. ; 23;
lake-edhoc-KEM.spthy;  --lemma=authRI_unique;  -D=WeakAEAD; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y1,gx1))@i && event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y2,gx2))@j ==> i = j is true. ; 24;
lake-edhoc-KEM.spthy;  --lemma=authIR_unique;  -D=NeutralCheck; RESULT event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x,gy))@i && event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x2,gy2))@j ==> i = j is false. ; 24;
lake-edhoc-KEM.spthy;  --lemma=secretR;  -D=NeutralCheck; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && attacker(k4)@j && event(Honest(pkI_2))@k ==> (event(Compromise(pkI_2))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(y))@t || event(LeakShare(gx))@t is true. ; 24;
lake-edhoc-KEM.spthy;  --lemma=secretI;  -D=CredCheck; RESULT event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x,gy))@i && attacker(k4)@j && event(Honest(pkR_2))@k ==> (event(Compromise(pkR_2))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(gy))@t || event(LeakShare(x))@t is true. ; 24;
lake-edhoc-KEM.spthy;  --lemma=authIR_unique;  -D=NeutralCheck -D=WeakestSignature; RESULT event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x,gy))@i && event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x2,gy2))@j ==> i = j is false. ; 24;
lake-edhoc-KEM.spthy;  --lemma=secretI;  -D=NeutralCheck; RESULT event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x,gy))@i && attacker(k4)@j && event(Honest(pkR_2))@k ==> (event(Compromise(pkR_2))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(gy))@t || event(LeakShare(x))@t is true. ; 24;
lake-edhoc-KEM.spthy;  --lemma=authRI_unique;  -D=NeutralCheck; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y1,gx1))@i && event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y2,gx2))@j ==> i = j is true. ; 24;
lake-edhoc-KEM.spthy;  --lemma=secretR;  -D=WeakAEAD; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && attacker(k4)@j && event(Honest(pkI_2))@k ==> (event(Compromise(pkI_2))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(y))@t || event(LeakShare(gx))@t is true. ; 24;
lake-edhoc-KEM.spthy;  --lemma=authRI_unique;  -D=CredCheck; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y1,gx1))@i && event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y2,gx2))@j ==> i = j is true. ; 24;
lake-edhoc-KEM.spthy;  --lemma=secretI;  -D=XorPrecise; RESULT event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x,gy))@i && attacker(k4)@j && event(Honest(pkR_2))@k ==> (event(Compromise(pkR_2))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(gy))@t || event(LeakShare(x))@t is true. ; 24;
lake-edhoc-KEM.spthy;  --lemma=secretR;  -D=NeutralCheck -D=WeakestSignature; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && attacker(k4)@j && event(Honest(pkI_2))@k ==> (event(Compromise(pkI_2))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(y))@t || event(LeakShare(gx))@t is true. ; 24;
lake-edhoc-KEM.spthy;  --lemma=secretR; ; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && attacker(k4)@j && event(Honest(pkI_2))@k ==> (event(Compromise(pkI_2))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(y))@t || event(LeakShare(gx))@t is true. ; 25;
lake-edhoc-KEM.spthy;  --lemma=secretI;  -D=NeutralCheck -D=WeakestSignature; RESULT event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x,gy))@i && attacker(k4)@j && event(Honest(pkR_2))@k ==> (event(Compromise(pkR_2))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(gy))@t || event(LeakShare(x))@t is true. ; 25;
lake-edhoc-KEM.spthy;  --lemma=authRI_unique;  -D=XorPrecise; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y1,gx1))@i && event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y2,gx2))@j ==> i = j is true. ; 25;
lake-edhoc-KEM.spthy;  --lemma=authRI_unique; ; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y1,gx1))@i && event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y2,gx2))@j ==> i = j is true. ; 25;
lake-edhoc-KEM.spthy;  --lemma=secretR;  -D=CredCheck; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && attacker(k4)@j && event(Honest(pkI_2))@k ==> (event(Compromise(pkI_2))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(y))@t || event(LeakShare(gx))@t is true. ; 25;
lake-edhoc-KEM.spthy;  --lemma=authRI_unique;  -D=NeutralCheck -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y1,gx1))@i && event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y2,gx2))@j ==> i = j is true. ; 25;
lake-edhoc-KEM.spthy;  --lemma=secretR;  -D=NeutralCheck -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && attacker(k4)@j && event(Honest(pkI_2))@k ==> (event(Compromise(pkI_2))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(y))@t || event(LeakShare(gx))@t is true. ; 25;
lake-edhoc-KEM.spthy;  --lemma=secretR;  -D=XorPrecise; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && attacker(k4)@j && event(Honest(pkI_2))@k ==> (event(Compromise(pkI_2))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(y))@t || event(LeakShare(gx))@t is true. ; 25;
lake-edhoc-KEM.spthy;  --lemma=authRI_unique;  -D=NeutralCheck -D=WeakestSignature; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y1,gx1))@i && event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y2,gx2))@j ==> i = j is true. ; 25;
lake-edhoc-KEM.spthy;  --lemma=secretI;  -D=NeutralCheck -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x,gy))@i && attacker(k4)@j && event(Honest(pkR_2))@k ==> (event(Compromise(pkR_2))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(gy))@t || event(LeakShare(x))@t is true. ; 25;
lake-edhoc-KEM.spthy;  --lemma=authRI_unique;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y1,gx1))@i && event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y2,gx2))@j ==> i = j is true. ; 31;
lake-edhoc-KEM.spthy;  --lemma=secretI;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x,gy))@i && attacker(k4)@j && event(Honest(pkR_2))@k ==> (event(Compromise(pkR_2))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(gy))@t || event(LeakShare(x))@t is true. ; 31;
lake-edhoc-KEM.spthy;  --lemma=secretR;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && attacker(k4)@j && event(Honest(pkI_2))@k ==> (event(Compromise(pkI_2))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(y))@t || event(LeakShare(gx))@t is true. ; 33;
lake-edhoc-KEM.spthy;  --lemma=authRI_unique;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey -D=XorPrecise -D=WeakAEAD; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y1,gx1))@i && event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y2,gx2))@j ==> i = j is true. ; 139;
lake-edhoc-KEM.spthy;  --lemma=secretI;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey -D=XorPrecise -D=WeakAEAD; RESULT event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x,gy))@i && attacker(k4)@j && event(Honest(pkR_2))@k ==> (event(Compromise(pkR_2))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(gy))@t || event(LeakShare(x))@t is true. ; 141;
lake-edhoc-KEM.spthy;  --lemma=secretR;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey -D=XorPrecise -D=WeakAEAD; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && attacker(k4)@j && event(Honest(pkI_2))@k ==> (event(Compromise(pkI_2))@t && i > t) || event(LeakSessionKey(k4))@t || event(LeakShare(y))@t || event(LeakShare(gx))@t is true. ; 157;
lake-edhoc-KEM.spthy;  --lemma=honestauthRI_non_inj; ; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && event(Honest(pkI_2))@k ==> (i > t && event(AcceptI(cid2,m,pkI_2,pkR_2,k3,k4,x,gy))@t) || event(Compromise(pkI_2))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) is true. ; 19;
lake-edhoc-KEM.spthy;  --lemma=honestauthRI_non_inj;  -D=WeakAEAD; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && event(Honest(pkI_2))@k ==> (i > t && event(AcceptI(cid2,m,pkI_2,pkR_2,k3,k4,x,gy))@t) || event(Compromise(pkI_2))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) is true. ; 21;
lake-edhoc-KEM.spthy;  --lemma=authIR_unique;  -D=WeakAEAD; RESULT event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x,gy))@i && event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x2,gy2))@j ==> i = j is false. ; 21;
lake-edhoc-KEM.spthy;  --lemma=no_reflection_attacks_RI;  -D=NeutralCheck; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && event(Honest(pkI_2))@k ==> (i > t && event(AcceptI(cid2,m,pkI_2,pkR_2,k3,k4,x,gy))@t && cid_2 ≠ cid2) || event(Compromise(pkI_2))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) || event(LeakShare(gx))@t is false. ; 21;
lake-edhoc-KEM.spthy;  --lemma=honestauthRI_non_inj;  -D=CredCheck; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && event(Honest(pkI_2))@k ==> (i > t && event(AcceptI(cid2,m,pkI_2,pkR_2,k3,k4,x,gy))@t) || event(Compromise(pkI_2))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) is true. ; 22;
lake-edhoc-KEM.spthy;  --lemma=honestauthRI_non_inj;  -D=NeutralCheck; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && event(Honest(pkI_2))@k ==> (i > t && event(AcceptI(cid2,m,pkI_2,pkR_2,k3,k4,x,gy))@t) || event(Compromise(pkI_2))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) is true. ; 22;
lake-edhoc-KEM.spthy;  --lemma=no_reflection_attacks_RI;  -D=CredCheck; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && event(Honest(pkI_2))@k ==> (i > t && event(AcceptI(cid2,m,pkI_2,pkR_2,k3,k4,x,gy))@t && cid_2 ≠ cid2) || event(Compromise(pkI_2))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) || event(LeakShare(gx))@t is true. ; 22;
lake-edhoc-KEM.spthy;  --lemma=authIR_unique;  -D=CredCheck; RESULT event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x,gy))@i && event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x2,gy2))@j ==> i = j is false. ; 23;
lake-edhoc-KEM.spthy;  --lemma=no_reflection_attacks_RI; ; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && event(Honest(pkI_2))@k ==> (i > t && event(AcceptI(cid2,m,pkI_2,pkR_2,k3,k4,x,gy))@t && cid_2 ≠ cid2) || event(Compromise(pkI_2))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) || event(LeakShare(gx))@t is false. ; 23;
lake-edhoc-KEM.spthy;  --lemma=authIR_unique;  -D=NeutralCheck -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x,gy))@i && event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x2,gy2))@j ==> i = j is false. ; 23;
lake-edhoc-KEM.spthy;  --lemma=honestauthRI_non_inj;  -D=NeutralCheck -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && event(Honest(pkI_2))@k ==> (i > t && event(AcceptI(cid2,m,pkI_2,pkR_2,k3,k4,x,gy))@t) || event(Compromise(pkI_2))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) is true. ; 23;
lake-edhoc-KEM.spthy;  --lemma=honestauthRI_non_inj;  -D=NeutralCheck -D=WeakestSignature; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && event(Honest(pkI_2))@k ==> (i > t && event(AcceptI(cid2,m,pkI_2,pkR_2,k3,k4,x,gy))@t) || event(Compromise(pkI_2))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) is true. ; 23;
lake-edhoc-KEM.spthy;  --lemma=authIR_unique;  -D=XorPrecise; RESULT event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x,gy))@i && event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x2,gy2))@j ==> i = j is false. ; 23;
lake-edhoc-KEM.spthy;  --lemma=no_reflection_attacks_RI;  -D=NeutralCheck -D=WeakestSignature; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && event(Honest(pkI_2))@k ==> (i > t && event(AcceptI(cid2,m,pkI_2,pkR_2,k3,k4,x,gy))@t && cid_2 ≠ cid2) || event(Compromise(pkI_2))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) || event(LeakShare(gx))@t is false. ; 23;
lake-edhoc-KEM.spthy;  --lemma=honestauthRI_non_inj;  -D=XorPrecise; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && event(Honest(pkI_2))@k ==> (i > t && event(AcceptI(cid2,m,pkI_2,pkR_2,k3,k4,x,gy))@t) || event(Compromise(pkI_2))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) is true. ; 23;
lake-edhoc-KEM.spthy;  --lemma=no_reflection_attacks_RI;  -D=NeutralCheck -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && event(Honest(pkI_2))@k ==> (i > t && event(AcceptI(cid2,m,pkI_2,pkR_2,k3,k4,x,gy))@t && cid_2 ≠ cid2) || event(Compromise(pkI_2))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) || event(LeakShare(gx))@t is false. ; 23;
lake-edhoc-KEM.spthy;  --lemma=no_reflection_attacks_RI;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && event(Honest(pkI_2))@k ==> (i > t && event(AcceptI(cid2,m,pkI_2,pkR_2,k3,k4,x,gy))@t && cid_2 ≠ cid2) || event(Compromise(pkI_2))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) || event(LeakShare(gx))@t is false. ; 29;
lake-edhoc-KEM.spthy;  --lemma=honestauthRI_non_inj;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && event(Honest(pkI_2))@k ==> (i > t && event(AcceptI(cid2,m,pkI_2,pkR_2,k3,k4,x,gy))@t) || event(Compromise(pkI_2))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) is true. ; 29;
lake-edhoc-KEM.spthy;  --lemma=authIR_unique;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x,gy))@i && event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x2,gy2))@j ==> i = j is false. ; 29;
lake-edhoc-KEM.spthy;  --lemma=authIR_unique;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey -D=XorPrecise -D=WeakAEAD; RESULT event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x,gy))@i && event(AcceptI(cid_2,m,pkI_2,pkR_2,k3,k4,x2,gy2))@j ==> i = j is false. ; 87;
lake-edhoc-KEM.spthy;  --lemma=honestauthRI_non_inj;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey -D=XorPrecise -D=WeakAEAD; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && event(Honest(pkI_2))@k ==> (i > t && event(AcceptI(cid2,m,pkI_2,pkR_2,k3,k4,x,gy))@t) || event(Compromise(pkI_2))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) is true. ; 94;
lake-edhoc-KEM.spthy;  --lemma=data_authentication_I_to_R; ; RESULT event(AcceptIData(PRK_4x3m_2,method_2,pkI_2,pkR_2,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_2,(m2_2,m3)))))))))))@i && event(Honest(pkR_2))@j ==> (i > l && event(SendRData(method_2,pkR_2,(TH_2,(suitesI_2,(EAD_1,(EAD_2,(m11,m22)))))))@l) || (i > l && event(Compromise(pkR_2))@l) || (event(LeakShare(x))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 22;
lake-edhoc-KEM.spthy;  --lemma=data_authentication_I_to_R;  -D=NeutralCheck; RESULT event(AcceptIData(PRK_4x3m_2,method_2,pkI_2,pkR_2,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_2,(m2_2,m3)))))))))))@i && event(Honest(pkR_2))@j ==> (i > l && event(SendRData(method_2,pkR_2,(TH_2,(suitesI_2,(EAD_1,(EAD_2,(m11,m22)))))))@l) || (i > l && event(Compromise(pkR_2))@l) || (event(LeakShare(x))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 22;
lake-edhoc-KEM.spthy;  --lemma=data_authentication_I_to_R;  -D=CredCheck; RESULT event(AcceptIData(PRK_4x3m_2,method_2,pkI_2,pkR_2,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_2,(m2_2,m3)))))))))))@i && event(Honest(pkR_2))@j ==> (i > l && event(SendRData(method_2,pkR_2,(TH_2,(suitesI_2,(EAD_1,(EAD_2,(m11,m22)))))))@l) || (i > l && event(Compromise(pkR_2))@l) || (event(LeakShare(x))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 22;
lake-edhoc-KEM.spthy;  --lemma=data_authentication_R_to_I;  -D=NeutralCheck; RESULT event(AcceptRData(PRK_4x3m_2,method_2,pkI_2,pkR_2,y,gx,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_2,(m2_2,m3)))))))))))@i && event(Honest(pkI_2))@j ==> (i > l && event(AcceptIData(PRK_4x3m_2,method_2,pkI_2,pkR_2,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m11,(m22,m33)))))))))))@l) || (i > l && event(Compromise(pkI_2))@l) || (event(LeakShare(y))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 23;
lake-edhoc-KEM.spthy;  --lemma=data_authentication_I_to_R;  -D=WeakAEAD; RESULT event(AcceptIData(PRK_4x3m_2,method_2,pkI_2,pkR_2,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_2,(m2_2,m3)))))))))))@i && event(Honest(pkR_2))@j ==> (i > l && event(SendRData(method_2,pkR_2,(TH_2,(suitesI_2,(EAD_1,(EAD_2,(m11,m22)))))))@l) || (i > l && event(Compromise(pkR_2))@l) || (event(LeakShare(x))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 23;
lake-edhoc-KEM.spthy;  --lemma=no_reflection_attacks_RI;  -D=XorPrecise; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && event(Honest(pkI_2))@k ==> (i > t && event(AcceptI(cid2,m,pkI_2,pkR_2,k3,k4,x,gy))@t && cid_2 ≠ cid2) || event(Compromise(pkI_2))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) || event(LeakShare(gx))@t is false. ; 23;
lake-edhoc-KEM.spthy;  --lemma=data_authentication_R_to_I;  -D=CredCheck; RESULT event(AcceptRData(PRK_4x3m_2,method_2,pkI_2,pkR_2,y,gx,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_2,(m2_2,m3)))))))))))@i && event(Honest(pkI_2))@j ==> (i > l && event(AcceptIData(PRK_4x3m_2,method_2,pkI_2,pkR_2,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m11,(m22,m33)))))))))))@l) || (i > l && event(Compromise(pkI_2))@l) || (event(LeakShare(y))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 23;
lake-edhoc-KEM.spthy;  --lemma=no_reflection_attacks_RI;  -D=WeakAEAD; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && event(Honest(pkI_2))@k ==> (i > t && event(AcceptI(cid2,m,pkI_2,pkR_2,k3,k4,x,gy))@t && cid_2 ≠ cid2) || event(Compromise(pkI_2))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) || event(LeakShare(gx))@t is false. ; 23;
lake-edhoc-KEM.spthy;  --lemma=data_authentication_I_to_R;  -D=XorPrecise; RESULT event(AcceptIData(PRK_4x3m_2,method_2,pkI_2,pkR_2,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_2,(m2_2,m3)))))))))))@i && event(Honest(pkR_2))@j ==> (i > l && event(SendRData(method_2,pkR_2,(TH_2,(suitesI_2,(EAD_1,(EAD_2,(m11,m22)))))))@l) || (i > l && event(Compromise(pkR_2))@l) || (event(LeakShare(x))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 23;
lake-edhoc-KEM.spthy;  --lemma=data_authentication_R_to_I; ; RESULT event(AcceptRData(PRK_4x3m_2,method_2,pkI_2,pkR_2,y,gx,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_2,(m2_2,m3)))))))))))@i && event(Honest(pkI_2))@j ==> (i > l && event(AcceptIData(PRK_4x3m_2,method_2,pkI_2,pkR_2,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m11,(m22,m33)))))))))))@l) || (i > l && event(Compromise(pkI_2))@l) || (event(LeakShare(y))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 24;
lake-edhoc-KEM.spthy;  --lemma=data_authentication_I_to_R;  -D=NeutralCheck -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptIData(PRK_4x3m_2,method_2,pkI_2,pkR_2,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_3,(m2_3,m3)))))))))))@i && event(Honest(pkR_2))@j ==> (i > l && event(SendRData(method_2,pkR_2,(TH_2,(suitesI_2,(EAD_1,(EAD_2,(m11,m22)))))))@l) || (i > l && event(Compromise(pkR_2))@l) || (event(LeakShare(x))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 24;
lake-edhoc-KEM.spthy;  --lemma=data_authentication_I_to_R;  -D=NeutralCheck -D=WeakestSignature; RESULT event(AcceptIData(PRK_4x3m_2,method_2,pkI_2,pkR_2,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_3,(m2_3,m3)))))))))))@i && event(Honest(pkR_2))@j ==> (i > l && event(SendRData(method_2,pkR_2,(TH_2,(suitesI_2,(EAD_1,(EAD_2,(m11,m22)))))))@l) || (i > l && event(Compromise(pkR_2))@l) || (event(LeakShare(x))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 24;
lake-edhoc-KEM.spthy;  --lemma=data_authentication_R_to_I;  -D=WeakAEAD; RESULT event(AcceptRData(PRK_4x3m_2,method_2,pkI_2,pkR_2,y,gx,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_2,(m2_2,m3)))))))))))@i && event(Honest(pkI_2))@j ==> (i > l && event(AcceptIData(PRK_4x3m_2,method_2,pkI_2,pkR_2,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m11,(m22,m33)))))))))))@l) || (i > l && event(Compromise(pkI_2))@l) || (event(LeakShare(y))@l && (method_2 = method_two || method_2 = method_three)) is false. ; 24;
lake-edhoc-KEM.spthy;  --lemma=data_authentication_R_to_I;  -D=NeutralCheck -D=WeakestSignature; RESULT event(AcceptRData(PRK_4x3m_2,method_2,pkI_2,pkR_2,y,gx,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_3,(m2_3,m3)))))))))))@i && event(Honest(pkI_2))@j ==> (i > l && event(AcceptIData(PRK_4x3m_2,method_2,pkI_2,pkR_2,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m11,(m22,m33)))))))))))@l) || (i > l && event(Compromise(pkI_2))@l) || (event(LeakShare(y))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 24;
lake-edhoc-KEM.spthy;  --lemma=data_authentication_R_to_I;  -D=NeutralCheck -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptRData(PRK_4x3m_2,method_2,pkI_2,pkR_2,y,gx,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_3,(m2_3,m3)))))))))))@i && event(Honest(pkI_2))@j ==> (i > l && event(AcceptIData(PRK_4x3m_2,method_2,pkI_2,pkR_2,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m11,(m22,m33)))))))))))@l) || (i > l && event(Compromise(pkI_2))@l) || (event(LeakShare(y))@l && (method_2 = method_two || method_2 = method_three)) is false. ; 25;
lake-edhoc-KEM.spthy;  --lemma=data_authentication_R_to_I;  -D=XorPrecise; RESULT event(AcceptRData(PRK_4x3m_2,method_2,pkI_2,pkR_2,y,gx,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_2,(m2_2,m3)))))))))))@i && event(Honest(pkI_2))@j ==> (i > l && event(AcceptIData(PRK_4x3m_2,method_2,pkI_2,pkR_2,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m11,(m22,m33)))))))))))@l) || (i > l && event(Compromise(pkI_2))@l) || (event(LeakShare(y))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 25;
lake-edhoc-KEM.spthy;  --lemma=data_authentication_I_to_R;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptIData(PRK_4x3m_2,method_2,pkI_2,pkR_2,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_3,(m2_3,m3)))))))))))@i && event(Honest(pkR_2))@j ==> (i > l && event(SendRData(method_2,pkR_2,(TH_2,(suitesI_2,(EAD_1,(EAD_2,(m11,m22)))))))@l) || (i > l && event(Compromise(pkR_2))@l) || (event(LeakShare(x))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 31;
lake-edhoc-KEM.spthy;  --lemma=data_authentication_R_to_I;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey; RESULT event(AcceptRData(PRK_4x3m_2,method_2,pkI_2,pkR_2,y,gx,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_3,(m2_3,m3)))))))))))@i && event(Honest(pkI_2))@j ==> (i > l && event(AcceptIData(PRK_4x3m_2,method_2,pkI_2,pkR_2,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m11,(m22,m33)))))))))))@l) || (i > l && event(Compromise(pkI_2))@l) || (event(LeakShare(y))@l && (method_2 = method_two || method_2 = method_three)) is false. ; 35;
lake-edhoc-KEM.spthy;  --lemma=no_reflection_attacks_RI;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey -D=XorPrecise -D=WeakAEAD; RESULT event(AcceptR(cid_2,m,pkI_2,pkR_2,k4,y,gx))@i && event(Honest(pkI_2))@k ==> (i > t && event(AcceptI(cid2,m,pkI_2,pkR_2,k3,k4,x,gy))@t && cid_2 ≠ cid2) || event(Compromise(pkI_2))@t || (event(LeakShare(y))@t && (m = method_two || m = method_three)) || event(LeakShare(gx))@t is false. ; 95;
lake-edhoc-KEM.spthy;  --lemma=data_authentication_I_to_R;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey -D=XorPrecise -D=WeakAEAD; RESULT event(AcceptIData(PRK_4x3m_2,method_2,pkI_2,pkR_2,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_3,(m2_3,m3)))))))))))@i && event(Honest(pkR_2))@j ==> (i > l && event(SendRData(method_2,pkR_2,(TH_2,(suitesI_2,(EAD_1,(EAD_2,(m11,m22)))))))@l) || (i > l && event(Compromise(pkR_2))@l) || (event(LeakShare(x))@l && (method_2 = method_two || method_2 = method_three)) is true. ; 97;
lake-edhoc-KEM.spthy;  --lemma=data_authentication_R_to_I;  -D=LeakShare -D=WeakestSignature -D=LeakSessionKey -D=XorPrecise -D=WeakAEAD; RESULT event(AcceptRData(PRK_4x3m_2,method_2,pkI_2,pkR_2,y,gx,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m1_3,(m2_3,m3)))))))))))@i && event(Honest(pkI_2))@j ==> (i > l && event(AcceptIData(PRK_4x3m_2,method_2,pkI_2,pkR_2,x,gy,(TH_2,(TH_3,(TH_4,(suitesI_2,(EAD_1,(EAD_2,(EAD_3,(m11,(m22,m33)))))))))))@l) || (i > l && event(Compromise(pkI_2))@l) || (event(LeakShare(y))@l && (method_2 = method_two || method_2 = method_three)) is false. ; 161;
